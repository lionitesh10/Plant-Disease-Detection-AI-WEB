# -*- coding: utf-8 -*-
"""Plant_Diseases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wr1ZY_fJmtjGFeyXeZ1PF4GJFh4djRrj
"""
"""
!pip install kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d vipoooool/new-plant-diseases-dataset

!unzip new-plant-diseases-dataset.zip

"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pydot
from keras.preprocessing.image import load_img,img_to_array,ImageDataGenerator
from keras.layers import Conv2D,MaxPooling2D,BatchNormalization,Activation,Dropout,Flatten,Dense
from keras.optimizers import Adam
from keras.models import Sequential
from keras.callbacks import ModelCheckpoint
from keras.utils import plot_model

pic_size=224
base_path="/content/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/"
plt.figure(0,figsize=(48,48))
cpt=0
for plants in os.listdir(base_path+"train/"):
  for i in range(1,4):
    cpt+=1
    plt.subplot(38,3,cpt)
    img=load_img(base_path+"train/"+plants+"/"+os.listdir(base_path+"train/"+plants)[i],target_size=(pic_size,pic_size))
    plt.imshow(img,cmap="gray")
plt.tight_layout()
plt.show()

labels=[]
print("Training Images")
for plants in os.listdir(base_path+"train"):
  print(str(len(os.listdir(base_path+"train/"+plants)))+" "+plants+" images")
  labels.append(plants)
print(labels)
labels.sort()
print(labels)

datagen_train=ImageDataGenerator()
datagen_validation=ImageDataGenerator()
batch_size=128
train_gen=datagen_train.flow_from_directory(base_path+"train",
                                            target_size=(pic_size,pic_size),
                                            color_mode="rgb",
                                            batch_size=batch_size,
                                            class_mode="categorical",
                                            shuffle=True
                                            )
validation_gen=datagen_validation.flow_from_directory(base_path+"valid",
                                                      target_size=(pic_size,pic_size),
                                                      color_mode="rgb",
                                                      batch_size=batch_size,
                                                      class_mode="categorical",
                                                      shuffle=False
                                                      )

nb_classes=38
model=Sequential()

model.add(Conv2D(64,(3,3),padding="same",input_shape=(pic_size,pic_size,3)))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(5,5),padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(512,(3,3),padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(512,(3,3),padding="same"))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(256))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(Dropout(0.25))

model.add(Dense(512))
model.add(BatchNormalization())
model.add(Activation("relu"))
model.add(Dropout(0.25))

model.add(Dense(nb_classes,activation="softmax"))

model.summary()
plot_model(model)

opt=Adam(lr=0.001)
model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])
checkpoint_cb=ModelCheckpoint("leaves_disease_classification_model.h5",save_best_only=True)



# Commented out IPython magic to ensure Python compatibility.
# %%time
# epochs=25
# history=model.fit_generator(generator=train_gen,
#                             steps_per_epoch=train_gen.n//train_gen.batch_size,
#                             epochs=epochs,
#                             validation_data=validation_gen,
#                             validation_steps=validation_gen.n//validation_gen.batch_size,
#                             callbacks=[checkpoint_cb]
#                             )

#pd.DataFrame(history.history).plot()



from keras.models import load_model

model=load_model("/content/leaves_disease_classification_model.h5")

model.summary()

from keras.preprocessing import image

img=image.load_img("/content/test/test/AppleScab1.JPG",target_size=(224,224))
img=image.img_to_array(img)
x=np.expand_dims(img,axis=0)

labels[model.predict_classes(x)[0]]
